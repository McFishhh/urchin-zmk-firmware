/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include "keymap_italian.h"

// Layer definitions
#define BASE 0
#define SYM 1
#define SYM2 2
#define EXT 3
#define FUNC 4
#define ACCENT 5
#define SETTINGS 6
// -----------------

&sk {
	// don't release mods on other mods presses
	ignore-modifiers;
};


/ {
	behaviors {
		// Enables holding the first mod-tap key
		// by performing a tap-release-hold sequence.
		// To use it: "&qt KEYCODE1 KEYCODE2"
		qt: quick_tap {
			compatible = "zmk,behavior-hold-tap";
			label = "QUICK_TAP";
			#binding-cells = <2>;
			flavor = "hold-preferred";
			tapping-term-ms = <200>;
			quick-tap-ms = <200>;
			bindings = <&kp>, <&kp>;
		};
		hml: home_row_mod_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <450>;
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 10 11 12 13 >; // List of keys on the left side of the keyboard
            hold-trigger-on-release;
        };
        hmr: home_row_mod_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            require-prior-idle-ms = <150>;
            tapping-term-ms = <450>; 
            quick-tap-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = < 16 17 18 19 >; // List of keys on the right side of the keyboard
            hold-trigger-on-release;
        };
	};

	macros {
		// sometimes my device thinks a modifier is being held down
		// pressing all modifiers fixes it.
		unstick: unstick {
			label = "ZM_unstick";
			compatible = "zmk,behavior-macro";
			#binding-cells = <0>;
			bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
		};
	};

combos {
		compatible = "zmk,combos";
		// both right thumbs
		combo_ext {
			timeout-ms = <100>;
			key-positions = < 32 33 >;
			bindings = <&mo FUNC>;
		};
		// both left thumb keys
		combo_functions {
			timeout-ms = <100>;
			key-positions = < 30 31 >;
			bindings = <&mo EXT>;
		};
		// all thumb keys
		combo_settings {
			timeout-ms = <200>;
			key-positions = < 30 31 32 33 >;
			bindings = <&mo SETTINGS>;
		};

		// tab combo
		combo_tab {
			timeout-ms = <100>;
			key-positions = < 7 8 >;
			bindings = <&kp TAB>;
			layers = <BASE>;
		};

		// enter combo
		combo_enter {
			timeout-ms = <100>;
			key-positions = < 17 18 >;
			bindings = <&kp ENTER>;
			layers = <BASE>;
		};
	};

	keymap {
		compatible = "zmk,keymap";
		// Base alpha layer
		default_layer {
			label = "Base";
			bindings = <
			&kp Q      &kp W      &kp E        &kp R       &kp T           &kp Y &kp U       &kp I        &kp O      &kp P 
			&kp A      &mt LALT S &mt LSHIFT D &mt LCTRL F &kp G           &kp H &mt RCTRL J &mt RSHIFT K &mt RALT L &mt RWIN DOUBLE_QUOTES
			&kp Z      &kp X      &kp C        &kp V       &kp B           &kp N &kp M       &kp COMMA    &kp DOT    &kp SLASH
							                     &sl SYM2 &kp BSPC        &kp SPACE &sl SYM
			>;
		};

		// Numbers and arrow keys 
		sym_layer {
			label = "Sym.";
			bindings = <
			&none       &kp N7      &kp N8      &kp N9      &none		    &kp N6     &kp N7      &kp UP       &kp N9       &kp N0
			&none       &kp N4      &kp N5      &kp N6      &kp N0		    &kp N6     &kp LEFT    &kp DOWN     &kp RIGHT    &kp N0
		 	&none       &kp N1      &kp N2      &kp N3      &kp N0 	        &none      &none       &none        &none        &none
													&trans  &kp BSPC   	 &trans &trans
			>;
		};

		// symbols
		symbols_2_layer {
			label = "Sym.2";
			bindings = <
			&kp EXCL    &kp AT        &kp HASH    &kp DOLLAR  &kp PERCENT        &kp UNDER &kp PLUS  &kp MINUS &kp EQUAL &kp PIPE 
			&kp CARET   &kp AMPERSAND &kp ASTRK   &kp LPAR    &kp RPAR           &kp LBRC  &kp RBRC  &kp LBKT  &kp RBKT  &kp BSLH
			&none 		&kp TILDE     &kp GRAVE   &kp LT      &kp GT     	     &none     &kp COLON &kp SEMI  &kp QMARK &kp APOS
															&none &none        	&none &none 
			>;
		};

		// Main modifiers and arrow keys
		ext_layer {
			label = "Mods";
			bindings = <
			&kp ESC   &kp C_PREV &kp C_PP   &kp C_NEXT &kp C_PAUSE    	 &kp PG_UP    &kp HOME &kp K_VOL_UP &kp END   &kp CAPS
			&kp CAPS  &sk LGUI   &kp K_CUT  &kp K_COPY &kp K_PASTE 	     &kp PG_DN    &kp LEFT &kp K_VOL_UP &kp RIGHT &kp ENTER
			&kp PSCRN &kp LC(X)  &kp LC(C)  &kp TAB    &kp LC(V)         &kp LC(BSPC) &kp BSPC &trans       &trans    &kp DEL
												&trans &kp LCTRL    	&kp ENTER  &mo FUNC 
			>;
		};

		// Function keys with modifiers
		func_layer {
			label = "FRow";
			bindings = <
			&kp F1 &kp F2 &kp F3 &kp F4 &kp F5                  &kp F6  &kp F7  &kp F8 &kp F9 &kp F10 
			&sk LALT &sk LGUI &sk LSHIFT &sk LCTRL &kp RALT     &kp F11 &kp F12 &kp PRINTSCREEN &trans &trans
			&none &none &none &none &none				        &none &none &none &none &none 
							  &none &none              			&none &none  
			>;
		};

		// Used to type regional accents.
		accent_layer {
			label = "Accent";
			bindings = <
			&none &none &none &kp IT_CEGR &none                         &none &none &none &none &none 
			&kp IT_AGRV &kp IT_IGRV &kp IT_OGRV &kp IT_EGRV &kp IT_EACU &none &none &none &none &none
			&none &none &none &kp IT_UGRV &none                         &none &none &none &none &none
									&none &none                         &none &none 
			>;
		};

		// Used to change the keyboard's settings.
		settings_layer {
				label = "Sett.";
				bindings = <
				&bootloader    &none &none &bt BT_CLR &bt BT_SEL 0               &bt BT_SEL 3 &none &unstick &none &bootloader 
				&none 	       &none &none &none      &bt BT_SEL 1 			     &bt BT_SEL 4 &none &none    &none &none
				&studio_unlock &none &none &none      &bt BT_SEL 2               &bt BT_SEL 5 &none &none    &none &studio_unlock
										&none &none                         &none &none 
				>;
		};
	};
};
